{"version":3,"sources":["components/Alphabet.js","App.js","index.js"],"names":["Alphabet","React","Component","render","react_default","a","createElement","className","disabled","this","props","onClick","alphabetClicked","alphabet","BOGGLE_URL","App","constructor","super","disableButton","x","y","state","active","neighbors","includes","wordPath","concat","forEach","i","push","submitWord","word","length","correctAnswers","setState","message","answers","sequence","boggleBoard","map","row","value","j","key","components_Alphabet","wordTyped","toggleAnswerView","showAnswers","timeRemaining","countdown","join","window","loaction","reload","loading","answer","onSubmit","e","preventDefault","type","onChange","target","placeholder","toString","componentDidMount","fetch","then","r","json","data","words","timer","setInterval","clearInterval","catch","er","rootElement","document","getElementById","ReactDOM","StrictMode","src_App"],"mappings":"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","file":"static/js/main.ad8ebd38.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Alphabet extends React.Component {\n  render() {\n    return (\n      <button\n        className=\"btn btn-success btn-block\"\n        disabled={this.props.disabled}\n        onClick={this.props.alphabetClicked}\n      >\n        {this.props.alphabet}\n      </button>\n    );\n  }\n}\n\nexport default Alphabet;\n","import React from \"react\";\nimport Alphabet from \"./components/Alphabet\";\nconst BOGGLE_URL = \"https://boggle-suman.herokuapp.com/boggle/generate\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sequence: [],\n      answers: [],\n      active: null,\n      word: \"\",\n      correctAnswers: [],\n      countdown: 3 * 60,\n      message: \"\",\n      loading: true,\n      wordPath: [],\n      showAnswers: false\n    };\n  }\n  componentDidMount() {\n    fetch(BOGGLE_URL)\n      .then(r => r.json())\n      .then(data => {\n        if (data.sequence) {\n          this.setState({\n            sequence: data.sequence,\n            answers: data.words,\n            loading: false\n          });\n          const timer = setInterval(() => {\n            if (this.state.countdown === 0) clearInterval(timer);\n            this.setState(state => {\n              return {\n                countdown: state.countdown--\n              };\n            });\n          }, 1000);\n        }\n      })\n      .catch(er => {\n        this.setState({\n          loading: false,\n          message: \"Failed to connect to backend server\"\n        });\n      });\n  }\n\n  disableButton = (x, y) => {\n    return this.state.active\n      ? !this.neighbors(x, y).includes(this.state.active) ||\n          this.state.wordPath.includes(`${x}, ${y}`)\n      : false;\n  };\n\n  neighbors = (x, y, neighbors = [x, y]) => {\n    [-1, 1].forEach(i => {\n      neighbors.push(\n        ...[\n          `${x + i}, ${y}`,\n          `${x}, ${y + i}`,\n          `${x + i}, ${y + i}`,\n          `${x - i}, ${y + i}`,\n          `${x + i}, ${y - i}`\n        ]\n      );\n    });\n    return neighbors;\n  };\n  submitWord = () => {\n    if (this.state.word === \"\" || this.state.word.length < 3) return;\n    if (this.state.correctAnswers.includes(this.state.word)) {\n      this.setState({\n        message: this.state.word + \" is already guessed.\",\n        word: \"\",\n        active: null,\n        wordPath: []\n      });\n    } else if (this.state.answers.includes(this.state.word)) {\n      this.setState(state => {\n        return {\n          correctAnswers: [...state.correctAnswers, this.state.word],\n          word: \"\",\n          active: null,\n          wordPath: []\n        };\n      });\n    } else {\n      this.setState({\n        word: \"\",\n        active: null,\n        wordPath: [],\n        message: this.state.word + \" is not found in dictionary\"\n      });\n    }\n  };\n  alphabetClicked = (x, y) => {\n    this.setState(state => {\n      return {\n        message: \"\",\n        active: `${x}, ${y}`,\n        wordPath: [...state.wordPath, `${x}, ${y}`],\n        word: state.word + state.sequence[x][y]\n      };\n    });\n  };\n\n  boggleBoard = () => (\n    <div className=\"row\">\n      {this.state.sequence.map((row, i) => {\n        return row.map((value, j) => {\n          return (\n            <div className=\"col-3 p-1\" key={j}>\n              <Alphabet\n                disabled={this.disableButton(i, j)}\n                alphabet={value}\n                alphabetClicked={() => this.alphabetClicked(i, j)}\n              />\n            </div>\n          );\n        });\n      })}\n    </div>\n  );\n\n  wordTyped = word => {\n    this.setState({\n      word\n    });\n  };\n\n  toggleAnswerView = () =>{\n    this.setState(state =>({\n      showAnswers: !state.showAnswers\n    }))\n  }\n\n  render = () => {\n    let timeRemaining = (\n      <div className=\"mb-4\">\n        <h4>\n          {this.state.countdown !== 0 ? (\n            <div>Time Remaining {this.state.countdown} Seconds.</div>\n          ) : (\n            <div>\n              Game Over! Total Points:{\" \"}\n              {this.state.correctAnswers.join(\"\").length}\n              <br />\n              <button onClick={() => window.loaction.reload()}>\n                Start New Game\n              </button>\n            </div>\n          )}\n        </h4>\n      </div>\n    );\n    let boggleBoard = this.boggleBoard();\n    if (this.state.loading) {\n      boggleBoard = (\n        <div className=\"m-5 text-center\">\n          <div className=\"spinner-border spinner-border-sm\"></div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"container mt-3\">\n        <h1>Boggle</h1>\n        <div className=\"card card-body container mt-5\">\n          <div className=\"row justify-content-center\">{timeRemaining}</div>\n          <div className=\"row\">\n            <div className=\"col-md-5\">{boggleBoard}</div>\n            <div className=\"col-md-7 bg-light p-2\">\n              <div className=\"font-weight-bold\">Correct Answers</div>\n              {this.state.correctAnswers.map(answer => {\n                return (\n                  <li key={answer}>\n                    {answer} ({answer.length})\n                  </li>\n                );\n              })}\n            </div>\n          </div>\n          <form\n            className=\"mt-3 row\"\n            onSubmit={e => {\n              e.preventDefault();\n              this.submitWord();\n            }}\n          >\n            <input\n              type=\"text\"\n              value={this.state.word}\n              onChange={e => {\n                this.wordTyped(e.target.value);\n              }}\n              className=\"form-control col-md-4\"\n              placeholder=\"Enter valid word\"\n            />\n            <button\n              className=\"btn btn-sm btn-primary mx-2 col-md-2\"\n              disabled={this.state.countdown === 0}\n            >\n              Submit\n            </button>\n            <div className=\"col-md-4\">\n              {this.state.message ? (\n                <span className=\"text-danger\">{this.state.message}</span>\n              ) : (\n                <span></span>\n              )}\n            </div>\n          </form>\n          <div className=\"mt-5 border-top row\">\n            <h5 className=\"col-12\">Instruction</h5>\n            <div className=\"col-12\">Guess the word from the board( or type it) and press submit to confirm it.</div>\n            <button className=\"col-12 btn btn-link\" onClick={() =>{this.toggleAnswerView()}}>Just show me the answers</button>\n            {\n              this.state.showAnswers? (<div className=\"col-12\">{this.state.answers.toString()}</div>): (<div></div>)\n            }\n          </div>\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}