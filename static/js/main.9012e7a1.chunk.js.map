{"version":3,"sources":["components/Alphabet.js","App.js","index.js"],"names":["Alphabet","React","Component","render","react_default","a","createElement","className","disabled","this","props","onClick","alphabetClicked","alphabet","BOGGLE_URL","App","constructor","super","getSequence","fetch","then","r","json","data","sequence","setState","answers","words","loading","timer","setInterval","console","log","state","countdown","clearInterval","catch","er","message","disableButton","x","y","active","neighbors","includes","wordPath","concat","forEach","i","push","submitWord","word","length","correctAnswers","boggleBoard","map","row","value","j","key","components_Alphabet","startNewGame","wordpath","wordTyped","toggleAnswerView","showAnswers","timeRemaining","join","answer","onSubmit","e","preventDefault","type","onChange","target","placeholder","toString","componentDidMount","rootElement","document","getElementById","ReactDOM","StrictMode","src_App"],"mappings":"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","file":"static/js/main.9012e7a1.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Alphabet extends React.Component {\n  render() {\n    return (\n      <button\n        className=\"btn btn-success btn-block\"\n        disabled={this.props.disabled}\n        onClick={this.props.alphabetClicked}\n      >\n        {this.props.alphabet}\n      </button>\n    );\n  }\n}\n\nexport default Alphabet;\n","import React from \"react\";\nimport Alphabet from \"./components/Alphabet\";\nconst BOGGLE_URL = \"https://boggle-suman.herokuapp.com/boggle/generate\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sequence: [],\n      answers: [],\n      active: null,\n      word: \"\",\n      correctAnswers: [],\n      countdown: 3 * 60,\n      message: \"\",\n      loading: true,\n      wordPath: [],\n      showAnswers: false\n    };\n  }\n  componentDidMount() {\n    this.getSequence()\n  }\n\n  getSequence = () =>{\n    fetch(BOGGLE_URL)\n      .then(r => r.json())\n      .then(data => {\n        if (data.sequence) {\n          this.setState({\n            sequence: data.sequence,\n            answers: data.words,\n            loading: false\n          });\n          const timer = setInterval(() => {\n            console.log(this.state.countdown)\n            this.setState(state => {\n              return {\n                countdown: state.countdown - 1\n              };\n            }, () =>{\n              if (this.state.countdown === 0) clearInterval(timer);\n            });\n            \n          }, 1000);\n        }\n      })\n      .catch(er => {\n        this.setState({\n          loading: false,\n          message: \"Failed to connect to backend server\"\n        });\n      });\n  }\n\n\n  disableButton = (x, y) => {\n    return this.state.active\n      ? !this.neighbors(x, y).includes(this.state.active) ||\n          this.state.wordPath.includes(`${x}, ${y}`)\n      : false;\n  };\n\n  neighbors = (x, y, neighbors = [x, y]) => {\n    [-1, 1].forEach(i => {\n      neighbors.push(\n        ...[\n          `${x + i}, ${y}`,\n          `${x}, ${y + i}`,\n          `${x + i}, ${y + i}`,\n          `${x - i}, ${y + i}`,\n          `${x + i}, ${y - i}`\n        ]\n      );\n    });\n    return neighbors;\n  };\n  submitWord = () => {\n    if (this.state.word === \"\" || this.state.word.length < 3) return;\n    if (this.state.correctAnswers.includes(this.state.word)) {\n      this.setState({\n        message: this.state.word + \" is already guessed.\",\n        word: \"\",\n        active: null,\n        wordPath: []\n      });\n    } else if (this.state.answers.includes(this.state.word)) {\n      this.setState(state => {\n        return {\n          correctAnswers: [...state.correctAnswers, this.state.word],\n          word: \"\",\n          active: null,\n          wordPath: []\n        };\n      });\n    } else {\n      this.setState({\n        word: \"\",\n        active: null,\n        wordPath: [],\n        message: this.state.word + \" is not found in dictionary\"\n      });\n    }\n  };\n  alphabetClicked = (x, y) => {\n    this.setState(state => {\n      return {\n        message: \"\",\n        active: `${x}, ${y}`,\n        wordPath: [...state.wordPath, `${x}, ${y}`],\n        word: state.word + state.sequence[x][y]\n      };\n    });\n  };\n\n  boggleBoard = () => (\n    <div className=\"row\">\n      {this.state.sequence.map((row, i) => {\n        return row.map((value, j) => {\n          return (\n            <div className=\"col-3 p-1\" key={j}>\n              <Alphabet\n                disabled={this.disableButton(i, j)}\n                alphabet={value}\n                alphabetClicked={() => this.alphabetClicked(i, j)}\n              />\n            </div>\n          );\n        });\n      })}\n    </div>\n  );\n\n  startNewGame = () =>{\n    this.setState({\n      word: null,\n      wordpath: [],\n      active: null,\n      countdown: 3 * 60\n    })\n    this.getSequence()\n  }\n\n  wordTyped = word => {\n    this.setState({\n      word\n    });\n  };\n\n  toggleAnswerView = () =>{\n    this.setState(state =>({\n      showAnswers: !state.showAnswers\n    }))\n  }\n\n  render = () => {\n    let timeRemaining = (\n      <div className=\"mb-4\">\n        <h4>\n          {this.state.countdown !== 0 ? (\n            <div>Time Remaining {this.state.countdown} Seconds.</div>\n          ) : (\n            <div className=\"text-center\">\n              Game Over! Total Points Scored:{\" \"}\n              {this.state.correctAnswers.join(\"\").length}<br/>\n              <button className=\"btn btn-link align-center\" onClick={() => this.startNewGame()}>\n                Start New Game\n              </button>\n            </div>\n          )}\n        </h4>\n      </div>\n    );\n    let boggleBoard = this.boggleBoard();\n    if (this.state.loading) {\n      boggleBoard = (\n        <div className=\"m-5 text-center\">\n          <div className=\"spinner-border spinner-border-sm\"></div>\n        </div>\n      );\n    }\n    return (\n      <div className=\"container mt-3\">\n        <h1>Boggle</h1>\n        <div className=\"card card-body container mt-5\">\n          <div className=\"row justify-content-center\">{timeRemaining}</div>\n          <div className=\"row\">\n            <div className=\"col-md-5\">{boggleBoard}</div>\n            <div className=\"col-md-7 bg-light p-2\">\n              <div className=\"font-weight-bold\">Correct Answers</div>\n              {this.state.correctAnswers.map(answer => {\n                return (\n                  <li key={answer}>\n                    {answer} ({answer.length})\n                  </li>\n                );\n              })}\n            </div>\n          </div>\n          <form\n            className=\"mt-3 row\"\n            onSubmit={e => {\n              e.preventDefault();\n              this.submitWord();\n            }}\n          >\n            <input\n              type=\"text\"\n              value={this.state.word}\n              onChange={e => {\n                this.wordTyped(e.target.value);\n              }}\n              className=\"form-control col-md-4\"\n              placeholder=\"Enter valid word\"\n            />\n            <button\n              className=\"btn btn-sm btn-primary mx-2 col-md-2\"\n              disabled={this.state.countdown === 0}\n            >\n              Submit\n            </button>\n            <div className=\"col-md-4\">\n              {this.state.message ? (\n                <span className=\"text-danger\">{this.state.message}</span>\n              ) : (\n                <span></span>\n              )}\n            </div>\n          </form>\n          <div className=\"mt-5 border-top row\">\n            <h5 className=\"col-12\">Instruction</h5>\n            <div className=\"col-12\">Guess the word from the board( or type it) and press submit to confirm it.</div>\n            <button className=\"col-12 btn btn-link\" onClick={() =>{this.toggleAnswerView()}}>Just show me the answers</button>\n            {\n              this.state.showAnswers? (<div className=\"col-12\">{this.state.answers.toString()}</div>): (<div></div>)\n            }\n          </div>\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}